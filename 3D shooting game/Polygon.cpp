//======================================
//
//ポリゴン表示処理
//Author:日野澤匠泉	[polygon.cpp]
//
//=====================================
#include"main.h"
#include"Polygon.h"
#include"input.h"

//マクロ定義
#define POLYGON_SIZE (2000.0f)		//ポリゴンサイズ
//グローバル変数宣言
LPDIRECT3DTEXTURE9	g_pTexturePolygon = NULL;			//テクスチャへのポインタ
LPDIRECT3DVERTEXBUFFER9		g_pVtxBuffPolygon = NULL;	//頂点のバッファ
D3DXVECTOR3 g_posPolygon;		//位置
D3DXVECTOR3 g_movePolygon;		//移動
D3DXVECTOR3 g_rotPolygon;		//向き
D3DXMATRIX g_mtxWorldPolygon;	//ワールドマトリックス

//=========================================================================
//ポリゴンの初期化処理
//=========================================================================
void InitPolygon(void)
{
	LPDIRECT3DDEVICE9 pDevice;		//デバイスのポインタ
	pDevice = GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\tnt000.png",
		&g_pTexturePolygon);

	//各種変数初期化
	g_posPolygon = D3DXVECTOR3(0.0f,0.0f, 0.0f);		//位置の初期化
	g_rotPolygon = D3DXVECTOR3(0.0f,0.0f,0.0f);			//向きを初期化する(Z値を使用する)
	g_movePolygon = D3DXVECTOR3(0.0f, 0.0f, 0.0f);		//移動量初期化

	//頂点バッファの生成
	pDevice->CreateVertexBuffer(sizeof(VERTEX_3D) * 4,
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_3D,
		D3DPOOL_MANAGED,
		&g_pVtxBuffPolygon,
		NULL);

	VERTEX_3D *pVtx;

	//頂点バッファをロックし頂点情報へのポインタを取得
	g_pVtxBuffPolygon->Lock(0, 0, (void**)&pVtx, 0);

	//頂点座標の設定
	pVtx[0].pos.x = (-POLYGON_SIZE);
	pVtx[1].pos.x = (+POLYGON_SIZE);
	pVtx[2].pos.x = (-POLYGON_SIZE);
	pVtx[3].pos.x = (+POLYGON_SIZE);

	pVtx[0].pos.y = (+ 0.0f);
	pVtx[1].pos.y = (+ 0.0f);
	pVtx[2].pos.y = (+ 0.0f);
	pVtx[3].pos.y = (+ 0.0f);

	pVtx[0].pos.z = (+POLYGON_SIZE);
	pVtx[1].pos.z = (+POLYGON_SIZE);
	pVtx[2].pos.z = (-POLYGON_SIZE);
	pVtx[3].pos.z = (-POLYGON_SIZE);
	
	//法線ベクトルの設定
	pVtx[0].nor = D3DXVECTOR3(0.0f, 1.0f, 0.0f);
	pVtx[1].nor = D3DXVECTOR3(0.0f, 1.0f, 0.0f);
	pVtx[2].nor = D3DXVECTOR3(0.0f, 1.0f, 0.0f);
	pVtx[3].nor = D3DXVECTOR3(0.0f, 1.0f, 0.0f);

	//頂点カラーの設定
	pVtx[0].col = D3DXCOLOR(1.0f,1.0f, 1.0f, 1.0f);
	pVtx[1].col = D3DXCOLOR(1.0f,1.0f, 1.0f, 1.0f);
	pVtx[2].col = D3DXCOLOR(1.0f,1.0f, 1.0f, 1.0f);
	pVtx[3].col = D3DXCOLOR(1.0f,1.0f, 1.0f, 1.0f);

	//テクスチャ座標の設定
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);

	//頂点バッファをアンロックする
	g_pVtxBuffPolygon->Unlock();

}

//===================================
//ポリゴンの終了処理
//===================================
void UninitPolygon(void)
{
	//テクスチャの破棄
	if (g_pTexturePolygon != NULL)
	{
		g_pTexturePolygon->Release();
		g_pTexturePolygon = NULL;
	}

	//頂点バッファの処理
	if (g_pVtxBuffPolygon != NULL)
	{
		g_pVtxBuffPolygon->Release();
		g_pVtxBuffPolygon = NULL;
	}

}

//===================================
//ポリゴンの更新処理
//===================================
void UpdatePolygon(void)
{
	
}

//====================================
//ポリゴンの描画処理
//====================================
void DrawPolygon(void)
{

	LPDIRECT3DDEVICE9 pDevice;		//デバイスのポインタ
	pDevice = GetDevice();
	D3DXMATRIX mtxRot, mtxTrans;	//計算用マトリックス

	//ワールドマトリックスの初期化
	D3DXMatrixIdentity(&g_mtxWorldPolygon);

	//向きを反映
	D3DXMatrixRotationYawPitchRoll(&mtxRot,g_rotPolygon.y,g_rotPolygon.x,g_rotPolygon.z);
	D3DXMatrixMultiply(&g_mtxWorldPolygon,&g_mtxWorldPolygon,&mtxRot);
	
	//位置を反映
	D3DXMatrixTranslation(&mtxTrans, g_posPolygon.x, g_posPolygon.y, g_posPolygon.z);
	D3DXMatrixMultiply(&g_mtxWorldPolygon, &g_mtxWorldPolygon, &mtxTrans);

	//ワールドマトリックスの設定
	pDevice->SetTransform(D3DTS_WORLD,&g_mtxWorldPolygon);

	//頂点バッファをデータストリームに設定
	pDevice->SetStreamSource(0, g_pVtxBuffPolygon, 0, sizeof(VERTEX_3D));

	//頂点フォーマットの設定
	pDevice->SetFVF(FVF_VERTEX_3D);

	//ポリゴンの描画処理
	pDevice->SetTexture(0, g_pTexturePolygon);

	//ポリゴンの描画
	pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);		//プリミティブの種類
}